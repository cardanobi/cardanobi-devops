# API server configuration
# Listens to 4000 and routes to 4001 (API GW or API LB tbd)
log_format custom_log '[$time_iso8601] from [$remote_addr] to [$upstream_addr] ,req: [$request] ,reqLength: [$request_length] ,ApiKey: [$http_client_api_key] ,upstream_response_time: [$upstream_response_time] ,request_time: [$request_time] ,response_size: [$bytes_sent]';

# rate limiting definitions

# # use case 1: one zone for each key (either per IP or per API KEY)
# # limit_req_zone $binary_remote_addr zone=free_req_zone:10m rate=5r/s;
# limit_req_zone $http_client_api_key zone=free_req_zone:10m rate=1r/s;

# use case 2: one zone per group of keys (e.g. per API KEY group/customer plan)
# zones definitions
limit_req_zone $free_plan_grp zone=user_plan_free:10m rate=1r/s;
limit_req_zone $spo_plan_grp zone=user_plan_spo:10m rate=2r/s;
limit_req_zone $dev_plan_grp zone=user_plan_dev:10m rate=4r/s;
limit_req_zone $dapp_plan_grp zone=user_plan_dapp:10m rate=10r/s;
limit_req_zone $enterprise_plan_grp zone=user_plan_enterprise:10m rate=20r/s;

# calculating keys
map $http_client_api_key $free_plan_grp {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-plan-free.map;
}
map $http_client_api_key $spo_plan_grp {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-plan-spo.map;
}
map $http_client_api_key $dev_plan_grp {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-plan-dev.map;
}
map $http_client_api_key $dapp_plan_grp {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-plan-dapp.map;
}
map $http_client_api_key $enterprise_plan_grp {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-plan-enterprise.map;
}

# managing a map of client-api-key which have reached their quota.
map $http_client_api_key $is_quota_limited {
	include /home/cardano/cardanobi-srv/config/nginx/cardanobi-quota-limited.map;
}

# managing unrestricted uris
#	Here we define the open uris by adding 2 reg exp, one to match when api key is empty, another one to match when is it not empty!
#	The penultimate line in the map block catches all other uri and align the need for an api key check with the presence of the api key in the first place!
map $http_client_api_key$request_uri $allowed {
	"/api/core/polls" 1;
	"~^.+/api/core/polls$" 1;
	"~^/api/core/polls/.+$" 1;
	"~^.+/api/core/polls/.+$" 1;
	"~^/api/.+$" 0;
	"~^.+/api/.+$" $http_client_api_key;
	default 0;
}

error_page 403 /403.html;
error_page 402 /402.html;

limit_req_status 429;

server {

    server_name preview.cardanobi.io; # managed by Certbot

	location = /403.html {
		root    /usr/share/nginx/html;
		allow   all;
	}

	location = /402.html {
		root    /usr/share/nginx/html;
		allow   all;
	}
	
	location / {
		# reject is Client-Api-Key is missing and uri restricted
	    if ($allowed = 0) {
    	    return 403;
    	}
		# reject if Client-Api-Key is marked as being quota limited.
		if ($is_quota_limited) {
    		return 402; 
		}

		# rate limiting
		limit_req zone=user_plan_free nodelay;
		limit_req zone=user_plan_spo burst=2 nodelay;
		limit_req zone=user_plan_dev burst=4 nodelay;
		limit_req zone=user_plan_dapp burst=10 nodelay;
		limit_req zone=user_plan_enterprise burst=20 nodelay;

		proxy_set_header Host $host;
		# proxy_set_header Host $host:$server_port;
		proxy_pass https://127.0.0.1:4001;
		proxy_redirect off;
	}

	access_log /var/log/nginx/cardanobi-preview-api-access.log	custom_log;
	error_log /var/log/nginx/cardanobi-preview-api-error.log warn;

    listen [::]:4000 ssl ipv6only=on; # managed by Certbot
    listen 4000 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/preview.cardanobi.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/preview.cardanobi.io/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}



